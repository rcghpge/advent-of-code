from time import perf_counter_ns

alias MulOp: UInt8 = 0
alias AddOp: UInt8 = 1
alias ConcatOp: UInt8 = 2

fn product(iterables: List[Int], repeat: Int = 1) -> List[List[Int]]:
    """
    Generates Cartesian product of input iterables with repetitions.
    """
    var pools = List[List[Int]]()
    for _ in range(repeat):
        pools.append(iterables)

    if len(pools) == 0:
        return List[List[Int]]()

    var indices = List[Int]([0] * len(pools))
    var results = List[List[Int]]()

    while True:
        results.append([pools[i][indices[i]] for i in range(len(pools))])

        var i = len(pools) - 1
        while i >= 0:
            indices[i] += 1
            if indices[i] == len(pools[i]):
                indices[i] = 0
                i -= 1
            else:
                break

        if i < 0:
            break

    return results

fn load_data(filepath: String) raises -> List[List[Int]]:
    """
    Loads data from a file and parses equations into a structured format.
    """
    var text: String
    with open(filepath, "r") as f:
        text = f.read()

    var equations = List[List[Int]]()
    for line in text.split('\n'):
        if line.strip() == '':
            continue

        equations.append([int(line.split(':')[0])])
        for num in line.strip().split(' ')[1:]:
            equations[-1].append(int(num))

    return equations

fn part_1() raises -> Int:
    """
    Part 1 of puzzle/challenge using multiplication and addition operations (2 operators).
    """
    var equations = load_data("input.txt")
    return sum(eq[0] for eq in equations if is_solvable(eq, [MulOp, AddOp]))

fn part_2() raises -> Int:
    """
    Part 2 of puzzle/challenge adding concatenation to the allowed operations (3 total).
    """
    var equations = load_data("input.txt")
    return sum(eq[0] for eq in equations if is_solvable(eq, [MulOp, AddOp, ConcatOp]))

fn is_solvable(eq: List[Int], allowed_ops: List[Int]) raises -> Bool:
    """
    Checks if an equation is solvable using the allowed operations.
    """
    for ops in product(allowed_ops, repeat=len(eq)-2):
        if is_solvable_h(eq, ops):
            return True
    return False

fn is_solvable_h(eq: List[Int], ops: List[Int]) raises -> Bool:
    """
    Evaluates a equation using a given sequence of operations/operators.
    """
    var acc: Int = eq[1]
    for i in range(2, len(eq)):
        if UInt8(ops[i-2]) == MulOp:
            acc *= eq[i]
        elif UInt8(ops[i-2]) == AddOp:
            acc += eq[i]
        elif UInt8(ops[i-2]) == ConcatOp:
            acc = int_concat(acc, eq[i])
        else:
            raise ValueError("Unexpected operation.")
    return acc == eq[0]

@always_inline
fn int_concat(a: Int, b: Int) -> Int:
    """
    Concatenate two integers.
    """
    var digits: Int = 0
    var temp_b: Int = b
    while temp_b > 0:
        temp_b //= 10
        digits += 1
    return (a * (10 ** digits)) + b

fn main() raises:
    """
    Measure execution time for Part 1 and Part 2.
    """
    var start: Int
    var end: Int

    start = perf_counter_ns()
    var p1_solution = part_1()
    end = perf_counter_ns()
    print(f"Part 1 Solution: {p1_solution} \nExecution Time: {(end - start) / 1e6:.3f} ms")

    start = perf_counter_ns()
    var p2_solution = part_2()
    end = perf_counter_ns()
    print(f"Part 2 Solution: {p2_solution} \nExecution Time: {(end - start) / 1e6:.3f} ms")
