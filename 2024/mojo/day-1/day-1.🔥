from builtin import sort
from builtin.file import open
from collections.list import List
from builtin.math import abs
from utils.stringref import StringRef
from builtin.len import len
from testing import assert_is

fn read_txt(file_path: String) raises -> (List[Int], List[Int]):
    var left_list = List[Int]()
    var right_list = List[Int]()

    with open(file_path, "r") as file:
        var content = file.read()
        for line in content.split('\n'):
            var parts = line.split(',')
            if len(parts) == 2:
                let left_value = atol(parts[0])
                let right_value = atol(parts[1])
                left_list.append(Int(left_value))
                right_list.append(Int(right_value))

    return left_list, right_list

fn calculate_total_distance(inout left_list: List[Int], inout right_list: List[Int]) raises -> Int:
    var ll = left_list
    sort(ll)
    var rl = right_list
    sort(rl)

    var total_distance = 0
    for i in range(ll.size):
        total_distance += abs(ll[i] - rl[i])

    return total_distance

fn main() raises:
    var file_path = "input.txt"	
    left_list, right_list = read_txt(file_path)
    result = calculate_total_distance(left_list, right_list)
    print("Total distance between the lists:", result)
