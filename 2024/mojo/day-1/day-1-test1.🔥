from collections.string import String, atol
from collections.list import List
from builtin.math import abs, min

fn read_txt(file_path: Int) raises -> (List[Int], List[Int]):
    var left_list = List[Int]()
    var right_list = List[Int]() 

    with open(file_path, "r") as file:
        let content = file.read()
	for line in content.split('\n'):
            var parts = line.strip().split(' ')
            if len(parts) == 2 and parts[0] != "" and parts[1] != "":
                try:
		    left_value = atol(parts[0])
                    right_value = atol(parts[1])
		    left_list.append(left_value)
                    right_list.append(right_value)
		except:
		    print("Skipping invalid line:", line)
    return (left_list, right_list)

fn sort_list(inout lst: List[Int]):
    # Simple bubble sort implementation
    let n = len(lst)
    for i in range(n):
        for j in range(0, n - i - 1):
            if lst[j] > lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]

fn calculate_total_distance(inout left_list: List[Int], inout right_list: List[Int]) -> Int:
        sort_list(left_list)
        sort_list(right_list)
    let total_distance = 0
        let size = min(len(left_list), len(right_list))
    for i in range(size):
        total_distance += abs(left_list[i] - right_list[i])

    return total_distance

fn main() raises:
    var file_path = "input.txt"
    let left_list, right_list = read_txt(file_path)
    var result = calculate_total_distance(left_list, right_list)
    print("Total distance between the lists:", result)
